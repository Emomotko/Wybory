#generujemy CALY przedzial czasowy
all_dates <- character(n_days)
for(i in seq_along(all_dates)){
all_dates[i] <- as.character(begin+i-1)
}
frame_help <- data.frame()
for(j in 1:n_plots){
y <- numeric(n_days)
exact_data <- frame %>%
filter(lastname==name[j] & date %in% all_dates )
for(i in seq_along(all_dates)){
k <- which(exact_data$date==all_dates[i])
if(length(k)>0&&!is.na(k)){
y[i] <- exact_data[k,3]
} else y[i] <- NA
}
dates_as_dates <- as.Date(all_dates)
frame_help <- rbind(frame_help,data.frame(y, dates_as_dates,kandydat=rep(name[j],length(y))))
}
p <- ggplot(frame_help, aes(x=dates_as_dates, y=y, colour=kandydat)) + xlab("")+
ylab("sentiment")+xlab("time")+scale_x_date(labels=date_format("%b-%Y"))+
theme(panel.background = element_rect(colour = "black"))+
theme(plot.title = element_text(colour = "red"))+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold",size=20))+
geom_line(size=thickness)+ geom_point() +scale_fill_brewer(palette="Spectral")+
ggtitle(main_title)+
theme(plot.title = element_text(lineheight=.8, face="bold"))
p
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
names_sentiment <- c("komorowski","duda","korwin","ogorek","jarubas","kukiz",
"palikot","wilk","braun","kowalski","tanajno")
names(names_sentiment) <- c("Bronislaw Komorowski","Andrzej Duda", "Janusz Korwin Mikke",
"Adam Jarubas", "Pawel Kukiz", "Janusz Palikot","wilk",
"braun","Marian Kowalski","tanajno")
names_sentiment
names_sentiment <- c("komorowski","duda","korwin","ogorek","jarubas","kukiz",
"palikot","wilk","braun","kowalski","tanajno")
names(names_sentiment) <- c("Bronislaw Komorowski","Andrzej Duda", "Janusz Korwin Mikke","Magdalena Ogorek",
"Adam Jarubas", "Pawel Kukiz", "Janusz Palikot","wilk",
"braun","Marian Kowalski","tanajno")
names_sentiment
name <- "Bronislaw Komorowski"
k <- which(names_sentiment %in% name)
name <- "Bronislaw Komorowski"
k <- which(names(names_sentiment) %in% name)
sentiment_graph <- function(frame, name,begin="2015-03-16", end=Sys.Date(),thickness=1){
library(stringi)
library(dplyr)
library(ggplot2)
library(scales)
names_sentiment <- c("komorowski","duda","korwin","ogorek","jarubas","kukiz",
"palikot","wilk","braun","kowalski","tanajno")
names(names_sentiment) <- c("Bronislaw Komorowski","Andrzej Duda", "Janusz Korwin Mikke","Magdalena Ogorek",
"Adam Jarubas", "Pawel Kukiz", "Janusz Palikot","wilk",
"braun","Marian Kowalski","tanajno")
k <- which(names(names_sentiment) %in% name)
name <- names_sentiment[k]
n_plots <- length(name)
begin <- as.Date(begin)
if(class(end)!="Date"){
end <- as.Date(end)
}
main_title <- "Analiza sentymentu dla wybranych kandydat?w"
n_days <- as.numeric(end-begin)+1
#generujemy CALY przedzial czasowy
all_dates <- character(n_days)
for(i in seq_along(all_dates)){
all_dates[i] <- as.character(begin+i-1)
}
frame_help <- data.frame()
for(j in 1:n_plots){
y <- numeric(n_days)
exact_data <- frame %>%
filter(lastname==name[j] & date %in% all_dates )
for(i in seq_along(all_dates)){
k <- which(exact_data$date==all_dates[i])
if(length(k)>0&&!is.na(k)){
y[i] <- exact_data[k,3]
} else y[i] <- NA
}
dates_as_dates <- as.Date(all_dates)
frame_help <- rbind(frame_help,data.frame(y, dates_as_dates,kandydat=rep(name[j],length(y))))
}
p <- ggplot(frame_help, aes(x=dates_as_dates, y=y, colour=kandydat)) + xlab("")+
ylab("sentiment")+xlab("time")+scale_x_date(labels=date_format("%b-%Y"))+
theme(panel.background = element_rect(colour = "black"))+
theme(plot.title = element_text(colour = "red"))+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold",size=20))+
geom_line(size=thickness)+ geom_point() +scale_fill_brewer(palette="Spectral")+
ggtitle(main_title)+
theme(plot.title = element_text(lineheight=.8, face="bold"))
p
}
shiny::runApp()
shiny::runApp()
sentiment_graph <- function(frame, name,begin="2015-03-16", end=Sys.Date(),thickness=1){
library(stringi)
library(dplyr)
library(ggplot2)
library(scales)
names_sentiment <- c("komorowski","duda","korwin","ogorek","jarubas","kukiz",
"palikot","wilk","braun","kowalski","tanajno")
names(names_sentiment) <- c("Bronislaw Komorowski","Andrzej Duda", "Janusz Korwin Mikke","Magdalena Ogorek",
"Adam Jarubas", "Pawel Kukiz", "Janusz Palikot","wilk",
"braun","Marian Kowalski","tanajno")
k <- which(names(names_sentiment) %in% name)
name <- names_sentiment[k]
n_plots <- length(name)
begin <- as.Date(begin)
if(class(end)!="Date"){
end <- as.Date(end)
}
main_title <- "Analiza sentymentu dla wybranych kandydatow"
n_days <- as.numeric(end-begin)+1
#generujemy CALY przedzial czasowy
all_dates <- character(n_days)
for(i in seq_along(all_dates)){
all_dates[i] <- as.character(begin+i-1)
}
frame_help <- data.frame()
for(j in 1:n_plots){
y <- numeric(n_days)
exact_data <- frame %>%
filter(lastname==name[j] & date %in% all_dates )
for(i in seq_along(all_dates)){
k <- which(exact_data$date==all_dates[i])
if(length(k)>0&&!is.na(k)){
y[i] <- exact_data[k,3]
} else y[i] <- NA
}
dates_as_dates <- as.Date(all_dates)
frame_help <- rbind(frame_help,data.frame(y, dates_as_dates,kandydat=rep(name[j],length(y))))
}
p <- ggplot(frame_help, aes(x=dates_as_dates, y=y, colour=kandydat)) + xlab("")+
ylab("sentiment")+xlab("time")+scale_x_date(labels=date_format("%b-%Y"))+
theme(panel.background = element_rect(colour = "black"))+
theme(plot.title = element_text(colour = "red"))+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold",size=20))+
geom_line(size=thickness)+ geom_point() +scale_fill_brewer(palette="Spectral")+
ggtitle(main_title)+
theme(plot.title = element_text(lineheight=.8, face="bold"))
p
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('D:/Moje dokumenty/Emilka/Wybory/Twitter/tweety_generuj_boxplot.R', echo=TRUE)
source('D:/Moje dokumenty/Emilka/Wybory/Twitter/sentyment_wykres.R', echo=TRUE)
source('D:/Moje dokumenty/Emilka/Wybory/Twitter/ile_miesiecy.R', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_like_w_czasie.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_like_roznice_w_czasie.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_post_ile_dziennie.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_wordcloud.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_like_najlepszy_wynik.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_post_ile_dziennie.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/Moje dokumenty/Emilka/SMAD/RAndBigData/P1/wybory/Wybory/Facebook/Funkcje/facebook_like_w_czasie.R', encoding='UTF-8', echo=TRUE)
source('D:/Moje dokumenty/Emilka/Wybory/Twitter/tweety_generuj_boxplot.R', echo=TRUE)
source('D:/Moje dokumenty/Emilka/Wybory/Twitter/tweety_generuj_wykres.R', echo=TRUE)
source('D:/Moje dokumenty/Emilka/Wybory/Twitter/tweety_generuj_slupki.R', echo=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
res <- facebook_like_najlepszy_wynik(as.Date("2015-03-29"), frame_likes = frame_likes, can = can)
can <- read.table("Facebook\\kandydaci.csv", h = T)
# podsumowanie likow
frame_likes <- read.table("Facebook\\Likes\\Podsumowanie\\Podsumowanie.csv",
sep=";", header = TRUE)
res <- facebook_like_najlepszy_wynik(as.Date("2015-03-29"), frame_likes = frame_likes, can = can)
ggplot(res, aes(x = factor(name), y = likes)) + geom_bar(stat = "identity")
res
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ggvis)
library(dplyr)
strony_dla_kandydata <- function(kandydat, czasOd, czasDo, dataTemp,c1=1,c2=1,c3=1,
c4=1,c5=1,c6=1,c7=1,c8=1,c9=1,c10=1) {
add_title <- function(vis, ..., x_lab = 'Czas')
{
add_axis(vis, "y", title=kandydat) %>%
add_axis("x", title = x_lab, ticks = 0,
properties = axis_props(
axis = list(stroke = "white"),
labels = list(fontSize = 0)
), ...)
}
stopifnot(is.character(kandydat), length(kandydat) == 1, is.data.frame(dataTemp))
names22 <- names(dataTemp)[1:10]
dataTemp[is.na(dataTemp)] <- 0
#filtering data
dataTemp <- dataTemp %>%
filter(., surname == kandydat)
odTemp <- which(dataTemp$date == czasOd)
doTemp <- which(dataTemp$date == czasDo)
dataTemp <- dataTemp[odTemp:doTemp,]
#plotting for every site
xlabTemp <- paste0("Czas od ", czasOd, " do ", czasDo)
whichSites <- c('p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7','p8','p9','p10')
whichSites <- whichSites[as.logical(c(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10))]
if(c1==1) {
p1 <- dataTemp %>% ggvis(~date,~TvPInfo) %>% layer_lines(stroke=factor("TvPInfo")) %>% add_title(x_lab=xlabTemp)} else p1=0
if(c2==1) {
p2 <- dataTemp %>% ggvis(~date,~WpPl) %>% layer_lines(stroke=factor("WpPl")) %>% add_title(x_lab=xlabTemp)} else p2=0
if(c3==1) {
p3 <- dataTemp %>% ggvis(~date,~WprostPl) %>% layer_lines(stroke=factor("WprostPl")) %>% add_title(x_lab=xlabTemp) } else p3=0
if(c4==1) {
p4 <- dataTemp %>% ggvis(~date,~OnetPl) %>% layer_lines(stroke=factor("OnetPl")) %>% add_title(x_lab=xlabTemp)}else p4=0
if(c5 ==1) {
p5 <- dataTemp %>% ggvis(~date,~NewsweekPl) %>% layer_lines(stroke=factor("NewsweekPl")) %>% add_title(x_lab=xlabTemp)}else p5=0
if(c6 ==1) {
p6 <- dataTemp %>% ggvis(~date,~Tvn24Pl) %>% layer_lines(stroke=factor("Tvn24Pl")) %>% add_title(x_lab=xlabTemp)}else p6=0
if(c7 ==1) {
p7 <- dataTemp %>% ggvis(~date,~NatematPl) %>% layer_lines(stroke=factor("NatematPl")) %>% add_title(x_lab=xlabTemp)}else p7=0
if(c8 ==1) {
p8 <- dataTemp %>% ggvis(~date,~GazetaPl) %>% layer_lines(stroke=factor("GazetaPl")) %>% add_title(x_lab=xlabTemp)}else p8=0
if(c9 ==1) {
p9 <- dataTemp %>% ggvis(~date,~DziennikPl) %>% layer_lines(stroke=factor("DziennikPl")) %>% add_title(x_lab=xlabTemp)}else p9=0
if(c10 ==1){
p10 <- dataTemp %>% ggvis(~date,~WyborczaPl) %>% layer_lines(stroke=factor("WyborczaPl")) %>% add_title(x_lab=xlabTemp)}else p10=0
vis_list <- lapply(whichSites, FUN = function(x) eval(parse(text=x)))
out <- do.call(Map, c(list(`c`), vis_list ))
attributes(out) <- attributes(vis_list[[1]])
out
}
frakcja_dla_kandydata <- function(kandydat, czasOd, czasDo, dataTemp,c1=1,c2=1,c3=1,
c4=1,c5=1,c6=1,c7=1,c8=1,c9=1,c10=1) {
library(ggvis)
library(dplyr)
add_title <- function(vis, ..., x_lab = 'Czas')
{
add_axis(vis, "y", title="Frakcja postow") %>%
add_axis("x", title = x_lab, ticks = 0,
properties = axis_props(
axis = list(stroke = "white"),
labels = list(fontSize = 0)
), ...)
}
stopifnot(is.character(kandydat), length(kandydat) == 1, is.data.frame(dataTemp))
names22 <- names(dataTemp)[1:10]
dataTemp[is.na(dataTemp)] <- 0
#filtering data
dataTemp <- dataTemp %>%
filter(., surname == kandydat)
odTemp <- which(dataTemp$date == czasOd)
doTemp <- which(dataTemp$date == czasDo)
dataTemp <- dataTemp[odTemp:doTemp,]
#plotting for every site
xlabTemp <- paste0("Czas od ", czasOd, " do ", czasDo)
whichSites <- c('p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7','p8','p9','p10')
whichSites <- whichSites[as.logical(c(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10))]
if(c1==1) {
p1 <- dataTemp %>% ggvis(~date,~TvPInfo) %>% layer_lines(stroke=factor("TvPInfo")) %>% add_title(x_lab=xlabTemp)} else p1=0
if(c2==1) {
p2 <- dataTemp %>% ggvis(~date,~WpPl) %>% layer_lines(stroke=factor("WpPl")) %>% add_title(x_lab=xlabTemp)} else p2=0
if(c3==1) {
p3 <- dataTemp %>% ggvis(~date,~WprostPl) %>% layer_lines(stroke=factor("WprostPl")) %>% add_title(x_lab=xlabTemp) } else p3=0
if(c4==1) {
p4 <- dataTemp %>% ggvis(~date,~OnetPl) %>% layer_lines(stroke=factor("OnetPl")) %>% add_title(x_lab=xlabTemp)}else p4=0
if(c5 ==1) {
p5 <- dataTemp %>% ggvis(~date,~NewsweekPl) %>% layer_lines(stroke=factor("NewsweekPl")) %>% add_title(x_lab=xlabTemp)}else p5=0
if(c6 ==1) {
p6 <- dataTemp %>% ggvis(~date,~Tvn24Pl) %>% layer_lines(stroke=factor("Tvn24Pl")) %>% add_title(x_lab=xlabTemp)}else p6=0
if(c7 ==1) {
p7 <- dataTemp %>% ggvis(~date,~NatematPl) %>% layer_lines(stroke=factor("NatematPl")) %>% add_title(x_lab=xlabTemp)}else p7=0
if(c8 ==1) {
p8 <- dataTemp %>% ggvis(~date,~GazetaPl) %>% layer_lines(stroke=factor("GazetaPl")) %>% add_title(x_lab=xlabTemp)}else p8=0
if(c9 ==1) {
p9 <- dataTemp %>% ggvis(~date,~DziennikPl) %>% layer_lines(stroke=factor("DziennikPl")) %>% add_title(x_lab=xlabTemp)}else p9=0
if(c10 ==1){
p10 <- dataTemp %>% ggvis(~date,~WyborczaPl) %>% layer_lines(stroke=factor("WyborczaPl")) %>% add_title(x_lab=xlabTemp)}else p10=0
vis_list <- lapply(whichSites, FUN = function(x) eval(parse(text=x)))
out <- do.call(Map, c(list(`c`), vis_list ))
attributes(out) <- attributes(vis_list[[1]])
out
}
pozycja_dla_kandydata <- function(kandydat, czasOd, czasDo, dataTemp,p1=1,p2=1,p3=1,p4=1) {
library(ggvis)
library(dplyr)
add_title <- function(vis, ..., x_lab = 'Czas')
{
add_axis(vis, "y", title="Liczba postow") %>%
add_axis("x", title = x_lab, ticks = 0,
properties = axis_props(
axis = list(stroke = "white"),
labels = list(fontSize = 0)
), ...)
}
stopifnot(is.character(kandydat), length(kandydat) == 1, is.data.frame(dataTemp))
dataTemp[is.na(dataTemp)] <- 0
#filtering data
dataTemp <- dataTemp %>%
filter(., Nazwisko == kandydat)
dataTemp1 <- dataTemp %>% filter(position==1) %>% group_by(date) %>% summarise(liczbaPostow11= n())
dataTemp2 <- dataTemp %>% filter(position==2) %>% group_by(date) %>% summarise(liczbaPostow22= n())
dataTemp3 <- dataTemp %>% filter(position==3) %>% group_by(date) %>% summarise(liczbaPostow33= n())
dataTemp4 <- dataTemp %>% filter(position==4) %>% group_by(date) %>% summarise(liczbaPostow44= n())
dataTempFinal <- merge(dataTemp1,dataTemp2, all=TRUE) %>%merge(dataTemp3, all=TRUE) %>% merge(dataTemp4, all=TRUE)
dataTempFinal[is.na(dataTempFinal)] <- 0
odTemp <- which(dataTempFinal$date == czasOd)[1]
if(is.na(which(dataTempFinal$date == czasOd)[1])) {daty <-as.character(c(as.Date(czasOd)+1,as.Date(czasOd)-1,
as.Date(czasOd)+2,as.Date(czasOd)-2,as.Date(czasOd)+3,as.Date(czasOd)-3))
xx <- sapply(daty, FUN=function(x){which(dataTempFinal$date==x)[1]})
odTemp <- xx[!is.na(xx)][1]}
doTemp <- which(dataTempFinal$date == czasDo)[length(which(dataTempFinal$date == czasDo))]
if(is.na(which(dataTempFinal$date == czasOd)[1])) {daty <-as.character(c(as.Date(czasDo)+1,as.Date(czasDo)-1,
as.Date(czasDo)+2,as.Date(czasDo)-2,as.Date(czasDo)+3,as.Date(czasOd)-3))
xx <- sapply(daty, FUN=function(x){which(dataTempFinal$date==x)[1]})
doTemp <- xx[!is.na(xx)][1]}
dataTemp <- dataTempFinal[odTemp:doTemp,]
#plotting for every site
xlabTemp <- paste0("Czas od ", czasOd, " do ", czasDo)
whichPosition <- c('plot1', 'plot2', 'plot3', 'plot4')
whichPosition <- whichPosition[as.logical(c(p1,p2,p3,p4))]
if(p1==1) {
plot1 <-dataTempFinal  %>%
ggvis(~date,~liczbaPostow11) %>% layer_lines(stroke=factor("pozycja1")) %>% add_title(x_lab=xlabTemp)} else plot1=0
if(p2==1) {
plot2 <-  dataTempFinal  %>%
ggvis(~date,~liczbaPostow22) %>% layer_lines(stroke=factor("pozycja2")) %>% add_title(x_lab=xlabTemp)} else plot2=0
if(p3==1) {
plot3 <-   dataTempFinal  %>%
ggvis(~date,~liczbaPostow33) %>% layer_lines(stroke=factor("pozycja3")) %>% add_title(x_lab=xlabTemp) } else plot3=0
if(p4==1) {
plot4 <-   dataTempFinal  %>%
ggvis(~date,~liczbaPostow44) %>% layer_lines(stroke=factor("pozycja4")) %>% add_title(x_lab=xlabTemp)} else plot4=0
vis_list <- lapply(whichPosition, FUN = function(x) eval(parse(text=x)))
out <- do.call(Map, c(list(`c`), vis_list ))
attributes(out) <- attributes(vis_list[[1]])
out
}
kandydaci_dla_strony <- function(strona, czasOd, czasDo, dataTemp,c1=1,c2=1,c3=1,
c4=1,c5=1,c6=1,c7=1,c8=1,c9=1,c10=1) {
library(ggvis)
library(dplyr)
add_title <- function(vis, ..., x_lab = 'Czas')
{
add_axis(vis, "y", title=strona) %>%
add_axis("x", title = x_lab, ticks = 0,
properties = axis_props(
axis = list(stroke = "white"),
labels = list(fontSize = 0)
), ...)
}
stopifnot(is.character(strona), length(strona) == 1, is.data.frame(dataTemp))
names22 <- names(dataTemp)[1:10]
dataTemp[is.na(dataTemp)] <- 0
dataTemp <- dataTemp[c('date','surname',strona)]
#filtering data
dataTemp1 <- dataTemp %>% filter(surname=='komorowski')  %>% select(-surname)
names(dataTemp1)[2] <- 'surnameKomorowski'
dataTemp2 <- dataTemp %>% filter(surname=='duda') %>% select(-surname)
names(dataTemp2)[2] <- 'surnameDuda'
dataTemp3 <- dataTemp %>% filter(surname=='ogorek') %>% select(-surname)
names(dataTemp3)[2] <- 'surnameOgorek'
dataTemp4 <- dataTemp %>% filter(surname=='korwin') %>% select(-surname)
names(dataTemp4)[2] <- 'surnameKorwin'
dataTemp5 <- dataTemp %>% filter(surname=='kukiz')  %>% select(-surname)
names(dataTemp5)[2] <- 'surnameKukiz'
dataTemp6 <- dataTemp %>% filter(surname=='jarubas')  %>% select(-surname)
names(dataTemp6)[2] <- 'surnameJarubas'
dataTemp7 <- dataTemp %>% filter(surname=='palikot') %>% select(-surname)
names(dataTemp7)[2] <- 'surnamePalikot'
dataTemp8 <- dataTemp %>% filter(surname=='wilk') %>% select(-surname)
names(dataTemp8)[2] <- 'surnameWilk'
dataTemp9 <- dataTemp %>% filter(surname=='braun')  %>% select(-surname)
names(dataTemp9)[2] <- 'surnameBraun'
dataTemp10 <- dataTemp %>% filter(surname=='tanajno')  %>% select(-surname)
names(dataTemp10)[2] <- 'surnameTanajno'
dataFinal <- merge(dataTemp1,dataTemp2, all=TRUE) %>% merge(dataTemp3, all=TRUE)  %>% merge(dataTemp4, all=TRUE)  %>%
merge(dataTemp5, all=TRUE)  %>% merge(dataTemp6, all=TRUE)  %>% merge(dataTemp7, all=TRUE)  %>% merge(dataTemp8, all=TRUE)  %>%
merge(dataTemp9, all=TRUE)  %>% merge(dataTemp10, all=TRUE)
#dataTemp <- dataTemp[c('date','surname',strona)]
odTemp <- which(dataTemp$date == czasOd)[1]
doTemp <- which(dataTemp$date == czasDo)[length(which(dataTemp$date == czasDo))]
dataTemp <- dataTemp[odTemp:doTemp,]
#plotting for every site
xlabTemp <- paste0("Czas od ", czasOd, " do ", czasDo)
whichCandidates <- c('p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7','p8','p9','p10')
whichCandidates <- whichCandidates[as.logical(c(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10))]
if(c1==1) {
p1 <- dataFinal %>% ggvis(~date,~surnameKomorowski) %>% layer_lines(stroke=factor("Komorowski")) %>% add_title(x_lab=xlabTemp)} else p1=0
if(c2==1) {
p2 <- dataFinal  %>% ggvis(~date,~surnameDuda) %>% layer_lines(stroke=factor("Duda")) %>% add_title(x_lab=xlabTemp)} else p2=0
if(c3==1) {
p3 <- dataFinal  %>% ggvis(~date,~surnameOgorek) %>% layer_lines(stroke=factor("Ogorek")) %>% add_title(x_lab=xlabTemp) } else p3=0
if(c4==1) {
p4 <- dataFinal  %>% ggvis(~date,~surnameKorwin) %>% layer_lines(stroke=factor("Korwin")) %>% add_title(x_lab=xlabTemp)}else p4=0
if(c5 ==1) {
p5 <- dataFinal  %>% ggvis(~date,~surnameKukiz) %>% layer_lines(stroke=factor("Kukiz")) %>% add_title(x_lab=xlabTemp)}else p5=0
if(c6 ==1) {
p6 <- dataFinal  %>% ggvis(~date,~surnameJarubas) %>% layer_lines(stroke=factor("Jarubas")) %>% add_title(x_lab=xlabTemp)}else p6=0
if(c7 ==1) {
p7 <- dataFinal  %>% ggvis(~date,~surnamePalikot) %>% layer_lines(stroke=factor("Palikot")) %>% add_title(x_lab=xlabTemp)}else p7=0
if(c8 ==1) {
p8 <- dataFinal  %>% ggvis(~date,~surnameWilk) %>% layer_lines(stroke=factor("Wilk")) %>% add_title(x_lab=xlabTemp)}else p8=0
if(c9 ==1) {
p9 <- dataFinal  %>% ggvis(~date,~surnameBraun) %>% layer_lines(stroke=factor("Braun")) %>% add_title(x_lab=xlabTemp)}else p9=0
if(c10 ==1){
p10 <- dataFinal  %>% ggvis(~date,~surnameTanajno) %>% layer_lines(stroke=factor("Tanajno")) %>% add_title(x_lab=xlabTemp)}else p10=0
vis_list <- lapply(whichCandidates, FUN = function(x) eval(parse(text=x)))
out <- do.call(Map, c(list(`c`), vis_list ))
attributes(out) <- attributes(vis_list[[1]])
out
}
read.table("data/candidate_general_info.csv",
header = TRUE, sep = ";", stringsAsFactors = FALSE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("D:/Wybory_0.0.0.9000.gz", repos = NULL)
install.packages("D:/Wybory_0.0.0.9000.gz", repos = NULL)
install.packages("D:/Wybory_0.0.0.9000.gz", repos = NULL)
install.packages("D:/Wybory_0.0.0.9000.gz", repos = NULL)
install.packages("D:/Wybory_0.0.0.9000.gz", repos = NULL)
install.packages("C:/Users/Emilka/Downloads/Wybory_0.0.0.9000.gz", repos = NULL)
tab_nasluch <- read.csv2("data/Podsumowanie_nasluch_kandydatow.csv")
tab_nasluch_miesiac <- read.csv2("data/Podsumowanie_nasluch_kandydatow_miesiace.csv")
nazwiska <- reactive({unique(c(input$kandydat, input$wybor))})
tab_sentyment <- read.csv2("data/Podsumowanie_tweetow.csv")
nazwiska <- unique(c(input$kandydat, input$wybor))
tab_sentyment <- read.csv2("data/Podsumowanie_tweetow.csv")
frame_posts <- read.table("Facebook/Posty/facebook_posts.csv", sep =";", h = T)
# tableka inforamacyjna, w ktorej sa imiona i nazwiska wszystkich kandydatow i id
can <- read.table("Facebook/kandydaci.csv", h = T)
# podsumowanie likow
frame_likes <- read.table("Facebook/Likes/Podsumowanie/Podsumowanie.csv",
sep=";", header = TRUE)
frame_likes <- read.table("Facebook/Likes/Podsumowanie/Podsumowanie.csv",
sep=";", header = TRUE)
install.packages("C:/Users/Emilka/Downloads/prezydentwsieci_0.0.0.9000.gz", repos = NULL)
install.packages("C:/Users/Emilka/Downloads/prezydentwsieci_0.0.0.9000.gz", repos = NULL)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('C:/Users/grabarze/Desktop/New folder/Wybory')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('C:/Users/grabarze/Desktop/New folder/Wybory')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("C:/Users/Emilka/Downloads/prezydentwsieci_0.0.0.9000.tar.gz", repos = NULL, type = "source")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sentyment_wykres(read.csv2("Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"))
sentyment_wykres(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"))
shiny::runApp()
sentyment_wykres(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"))
library(prezydentwsieci)
sentyment_wykres(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"))
library(prezydentwsieci)
sentyment_wykres(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinythemes")
tweety_generuj_boxplot(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"))
tweety_generuj_boxplot(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like")
tweety_generuj_boxplot(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like",begin="2015-01-01")
tweety_generuj_boxplot(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio likeow",begin="2015-01-01")
tweety_generuj_boxplot(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like",begin="2015-01-01")
tweety_generuj_wykres(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like",begin="2015-01-01")
read.csv2("data/Podsumowanie_tweetow.csv")
tweety_generuj_wykres(read.csv2("data/Podsumowanie_tweetow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like",begin="2015-01-01",end="2015-05-01")
shiny::runApp()
tweety_generuj_boxplot(read.csv2("data/Podsumowanie_nasluch_kandydatow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like",begin="2015-01-01")
tweety_generuj_wykres(read.csv2("data/Podsumowanie_nasluch_kandydatow.csv"),c("Bronislaw Komorowski","Andrzej Duda","Magdalena Ogorek"),type="srednio like",begin="2015-01-01",end="2015-05-01")
shiny::runApp()
shiny::runApp()
